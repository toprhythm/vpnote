(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{510:function(t,s,a){"use strict";a.r(s);var e=a(35),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"攻击防范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#攻击防范"}},[t._v("#")]),t._v(" 攻击防范")]),t._v(" "),a("h2",{attrs:{id:"题意分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题意分析"}},[t._v("#")]),t._v(" 题意分析")]),t._v(" "),a("ul",[a("li",[t._v("在Web安全领域中,XSS和CSRF是最常见的攻击方式。下面我们首先简单了解一下什么是XSS 和CSRF")]),t._v(" "),a("li",[t._v("XSS,即Cross Site Script,中译是跨站脚本攻击;")]),t._v(" "),a("li",[t._v("其原本缩写是CSS,但为了和层叠样式表(Cascading Style Sheet)有所区分,因而在安全领域叫做XSS.")]),t._v(" "),a("li",[t._v("XSS 攻击是指攻击者在网站上注入恶意的客户端代码,通过恶意脚本对客户端网页进行复改,从而在用户浏览网页时,对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。")]),t._v(" "),a("li",[t._v("攻击者对客户端网页注入的恶意脚本一般包括JavaScript,有时也会包含HTML和Flash。")]),t._v(" "),a("li",[t._v("有很多种方式进行XSS 攻击,但它们的共同点为:将一些隐私数据像cookie,session发送给攻击者,将受害者重定向到一个由攻击者控制的网站,在受害者的机器上进行一些恶意操作。")]),t._v(" "),a("li",[t._v("XSS攻击可以分为3类:反射型(非持久型)、存储型(持久型)、基于DOM。")])]),t._v(" "),a("ol",[a("li",[t._v("反射")])]),t._v(" "),a("ul",[a("li",[t._v("反射型(Reflected XSS)发出请求时,XSS代码出现在url中,作为输入提交到服务器端,服务器端解析后响应,XSS代码随响应内容一起传回给浏览器,最后浏览器解析执行XSS代码。这个过程像一次反射,所以叫反射型XSS。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("存储")])]),t._v(" "),a("ul",[a("li",[t._v("存储型存Stored XSS和Reflected XSS的差别就在于,具有攻击性的脚本被保存到了服务器端(数据库,内存,文件系统)并且可以被普通用户完整的从服务的取得并执行,从而获得了在网络上传播的能力。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("DOM")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("DOM型(DOM-based or local XSS)即基于DOM或本地的XSS 攻击:其实是一种特殊类型的反射型XSS,它是基于DOM文档对象模型的一种漏洞。可以通过DOM来动态修改页面内容,从客户端获取DOM中的数据并在本地执行。基于这个特性,就可以利用JS脚本来实现XSS漏洞的利用。")])]),t._v(" "),a("li",[a("p",[t._v("实际情况下的攻击例子:")])]),t._v(" "),a("li",[a("p",[t._v("举例有这样一个网站,可以让你对某个文章输入评论:")]),t._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/javascript"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])])])])]),t._v(" "),a("p",[t._v("xss防御错误：")]),t._v(" "),a("ul",[a("li",[t._v("(1)输入过滤,避免XSS 的方法之一主要是将用户输入的内容进行过滤。对所有用户提交内容进行可靠的输入验证,包括对URL、查询关键字、POST数据等,仅接受指定长度范围内、采用适当格式、采用所预期的字符的内容提交,对其他的一律过滤。(客户端和服务器都要)")]),t._v(" "),a("li",[t._v("(2)输出转义\n例如:往HTML标签之间插入不可信数据的时候,首先要做的就是对不可信数据进行HTML Entity 编码 HTML 字符实体")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("htmlParseFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n  s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&amp;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&lt;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v(" ")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&nbsp;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'\\'"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&#39;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v('\\"')]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"&quot;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tempStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<p>123</p>"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" html "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("htmlParseFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tempStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".content"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" html\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("ul",[a("li",[t._v("(3)使用HttpOnly Cookie\n1.\n将重要的cbokie标记为httponly,这样的话当浏览器向Web服务器发起请求的时就会带上cookie字段,但是在js脚本中却不能访问这个cookie,这样就避免了XSS攻击利用JavaScript的document.cookie获取cookie。\n2. 现代web开发框架如vue.js,react.js等,在设计的时候就考虑了XSS攻击对html插值进行了更进一步的抽象、过滤和转义,我们只要熟练正确地使用他们,就可以在大部分情况下避免XSS攻击。")])]),t._v(" "),a("p",[t._v("CSRF:")]),t._v(" "),a("ul",[a("li",[t._v("即Cross-site request forgery)中译是跨站请求伪造; CSRF顾名思义,是伪造请求,冒充用户在站内的正常操作。我们知道,绝大多数网站是通过cookie等方式辨识用户身份(包括使用服务器端Session 的网站,因为Session ID也是大多保存在cookie里面的),再予以授权的。所以要伪造用户的正常操作,最好的方法是通过XSS或链接欺骗等途径,让用户在本机(即拥有身份cookie的浏览器端)发起用户所不知道的请求。\n"),a("img",{attrs:{src:"https://gitee.com/toprhythm/pic-bed/raw/master/01-javase-pics/20220307160343.png",alt:"csrf"}})])]),t._v(" "),a("p",[t._v("csrf举例子：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("受害者Bob在银行有一笔存款,通过对银行的网站发送请求")])]),t._v(" "),a("li",[a("p",[t._v("http://bank. example/withdraw?account=bob&amount=1000000&for=bob2")])]),t._v(" "),a("li",[a("p",[t._v("可以使Bob把1000000 的存款转到bob2的账号下。通常情况下,该请求发送到网站后,服务器会先验证该请求是否来自一个合法的session,并且该session的用户Bob已经成功登陆。")])]),t._v(" "),a("li",[a("p",[t._v("黑客Mallory 自己在该银行也有账户,他知道上文中的URL可以把钱进行转帐操作。\nMallory 可以自己发送一个请求给银行:")])]),t._v(" "),a("li",[a("p",[t._v("http://bank. example/withdraw?account=bob&amount=1000000&for=Mallory.")])]),t._v(" "),a("li",[a("p",[t._v("但是这个请求来自Mallory而非Bob,他不能通过安全认证,因此该请求不会起作用。")])]),t._v(" "),a("li",[a("p",[t._v("这时,Mallory想到使用CSRF的攻击方式,他先自己做一个网站,在网站中放入如下代\n码:")])]),t._v(" "),a("li",[a("p",[t._v('src="http://bank. example/withdraw?account=bob&amount=1000000&for=Mallory\n”\n并且通过广告等诱使Bob来访问他的网站。当Bob访问该网站时,上述url就会从Bob 的浏览器发向银行,而这个请求会附带Bob浏览器中的cookie一起发向银行服务器。大多数情况下,该请求会失败,因为他要求Bob的认证信息。但是,如果Bob当时恰巧刚访问他的银行后不久,他的浏览器与银行网站之间的session尚未过期,浏览器的cookie 之中含有Bob的认证信息。这时,悲剧发生了,这个url请求就会得到响应,钱将从Bob的账号转移到Mallory的账号,而Bob当时毫不知情。等以后Bob发现账户钱少了,即使他去银行查询日志,他也只能发现确实有一个来自于他本人的合法请求转移了资金,没有任何被攻击的痕迹。而Mallory则可以拿到钱后道遥法外。')])]),t._v(" "),a("li",[a("p",[t._v("防范CSRF")]),t._v(" "),a("ol",[a("li",[t._v("验证HTTP Referer 字段,利用HTTP头中的Referer判断请求来源是否合法,Referer记录了该HTTP 请求的来源地址。")])]),t._v(" "),a("blockquote",[a("p",[t._v("优点:简单易行,只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查Referer 的值就可以。特别是对于当前现有的系统,不需要改变当前系统的任何已有代码和逻辑,没有风险,非常便捷。缺点: Referer的值是由浏览器提供的,不可全信,低版本浏览器下Referer存在伪造风险。用户自己可以设置浏览器使其在发送请求时不再提供Referer时,网站将拒绝合法用户的访问。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("在请求地址中添加token并验证。CSRF攻击之所以能够成功,是因为黑客可以完全伪造用户的请求,该请求中所有的用户验证信息都是存在于cookie中,因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的cookie来通过安全验证。要抵御CSRF,关键在于在请求中放入黑客所不能伪造的信息,并且该信息不存在于cookie之中。可以在HTTP 请求中以参数的形式加入一个随机产生的token,并在服务器端建立一个拦截器来验证这个token,如果请求中没有token 或者token内容不正确,则认为可能是CSRF攻击而拒绝该请求。")])]),t._v(" "),a("blockquote",[a("p",[t._v("优点:这种方法要比检查Referer要安全一些,token可以在用户登陆后产生并放于session 之中,然后在每次请求时把token 从session中拿出,与请求中的token进行比对。缺点:对所有请求都添加token比较困难。难以保证token本身的安全,依然会被利用获取到token。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("在HTTP头中自定义属性并验证\n这种方法也是使用token并进行验证,和上一种方法不同的是,这里并不是把token以参数的形式置于HTTP 请求之中,而是把它放到HTTP头中自定义的属性里。通过XMLHttpRequest 这个类,可以一次性给所有该类请求加上csrftoken这个HTTP头属性,并把token值放入其中。这样解决了上种方法在请求中加入token的不便,同时,通过XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏,也不用担心token会透过Referer 泄露到其他网站中去。")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("优点:统一管理token输入输出,可以保证token的安全性。缺点:有局限性,无法在非异步的请求上实施。")])]),t._v(" "),a("h2",{attrs:{id:"明确考察点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#明确考察点"}},[t._v("#")]),t._v(" 明确考察点")]),t._v(" "),a("ul",[a("li",[t._v("明确xss和csrf是什么")]),t._v(" "),a("li",[t._v("明确xss和csrf攻击的特点")]),t._v(" "),a("li",[t._v("如何防范xss和csrf攻击")])]),t._v(" "),a("h2",{attrs:{id:"回答思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回答思路"}},[t._v("#")]),t._v(" 回答思路")]),t._v(" "),a("ul",[a("li",[t._v("首先明确xss(Cross Site Scripting )是跨站脚本攻击 csrf(Cross-site request forgery)是跨站请求伪造,然后分别举一下两种攻击的例子,最后谈下两种攻击的防范措施。")])]),t._v(" "),a("h2",{attrs:{id:"相关扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关扩展"}},[t._v("#")]),t._v(" 相关扩展")]),t._v(" "),a("ol",[a("li",[t._v("百度：XSS 和CSRF简述及预防措施")]),t._v(" "),a("li",[t._v("百度：服务器受到DDoS攻击")])]),t._v(" "),a("h2",{attrs:{id:"笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#笔记"}},[t._v("#")]),t._v(" 笔记")]),t._v(" "),a("ul",[a("li",[t._v("xss: 通过脚本,黑客攻击你的浏览器，窃取用户信息")]),t._v(" "),a("li",[t._v("攻击答题思路：\n"),a("ol",[a("li",[t._v("XSS(Cross Site Scripting) 跨站脚本攻击")]),t._v(" "),a("li",[t._v("CSRF(Cross-Site-Request-Forgery) 跨站请求伪造,然后分别举一下两种攻击的例子,最后谈下两种攻击的防范措施。")])])]),t._v(" "),a("li",[t._v("XSS 跨站脚本攻击 csrf是跨站请求伪造")]),t._v(" "),a("li",[t._v("XSS\n"),a("ul",[a("li",[t._v("浏览器向服务器请求的时候被注入脚本攻击")]),t._v(" "),a("li",[t._v("分成三种类型 反射型(非持久型),存储型(持久型), 基于DOM")]),t._v(" "),a("li",[t._v("防范手段\n"),a("ul",[a("li",[t._v("输入过滤")]),t._v(" "),a("li",[t._v("输出过滤")]),t._v(" "),a("li",[t._v("加httponly 请求头 锁死cookie")])])]),t._v(" "),a("li",[t._v("csrf\n"),a("ul",[a("li",[t._v("黑客通过网站B 诱使用户去访问已经登录了的网站A进行一些违背用户意愿的请求 造成用户损失")]),t._v(" "),a("li",[t._v("防范手段\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("服务端验证 http请求的refer头信息")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("请求时候携带token")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("加验证码")])])])])])])])])])])])}),[],!1,null,null,null);s.default=r.exports}}]);