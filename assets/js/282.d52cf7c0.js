(window.webpackJsonp=window.webpackJsonp||[]).push([[282],{746:function(v,e,a){"use strict";a.r(e);var t=a(35),_=Object(t.a)({},(function(){var v=this,e=v.$createElement,a=v._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"web1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web1-0"}},[v._v("#")]),v._v(" web1.0")]),v._v(" "),a("ul",[a("li",[v._v(".jsp")]),v._v(" "),a("li",[v._v(".php")])]),v._v(" "),a("p",[v._v("每个文件都包含 h,c,jsp|php|cSharp|Java等若干内容")]),v._v(" "),a("p",[v._v("这种模式的好处是简单快捷，缺点也十分明显，JSP代码难以维护。")]),v._v(" "),a("p",[v._v("为了让开发更加便捷，代码更容易维护，前后端职责更清晰，衍生出MVC开发框架，前端以模板的形式出现，典型框架是Spring，Structs，Hibernate，使用了这种分层架构，职责清晰，代码容易维护，但这里的mvc限于后端，前后端只形成了一定程度上的分离，前端只完成了后端mvc开发中的view层。")]),v._v(" "),a("p",[v._v("但是，同样的这种模式存在着一些：")]),v._v(" "),a("ol",[a("li",[v._v("前端页面开发效率不高")]),v._v(" "),a("li",[v._v("前后端职责不清")])]),v._v(" "),a("h2",{attrs:{id:"web2-0时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web2-0时代"}},[v._v("#")]),v._v(" web2.0时代")]),v._v(" "),a("p",[v._v("自从Gmail的出现，ajax技术风靡全球，有了ajax，前后端职责更加清晰，因为前端可以通过ajax和后端进行数据交互，因此，整体架构成为了 client => server")]),v._v(" "),a("p",[v._v("通过ajax与后台服务器进行数据交换，前端开发人员，只需要开发页面这部分内容，数据可以由后台进行提供，而且ajax可以使页面实现部分刷新，减少了服务器负载和流量消耗，用户体验极佳，这时，才开始有专职的前端工程师，同时前端类库慢慢发展，最著名的就是jquery")]),v._v(" "),a("h2",{attrs:{id:"mvc、mvp、mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc、mvp、mvvm"}},[v._v("#")]),v._v(" MVC、MVP、MVVM")]),v._v(" "),a("h3",{attrs:{id:"mvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[v._v("#")]),v._v(" MVC")]),v._v(" "),a("p",[v._v("前端的mvc和后端类似，具备着：Model，View，Controller\nModel：负责保存应用数据，与后端数据进行同步\nController：负责业务逻辑，根据用户行为对Model数据进行修改\nView：负责视图展示，将model中的数据可视化出来")]),v._v(" "),a("p",[v._v("这样的模型，理论上是可行的，但是实际开发中，不会这样操作，例如：一个小的事件操作，都必须经过这样一个流程，那么开发不再便捷。")]),v._v(" "),a("p",[v._v("在实际场景中，我们往往会看到另一种模式")]),v._v(" "),a("h3",{attrs:{id:"mvp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[v._v("#")]),v._v(" MVP")]),v._v(" "),a("p",[v._v("解决MVC的问题")]),v._v(" "),a("h3",{attrs:{id:"mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[v._v("#")]),v._v(" MVVM")]),v._v(" "),a("p",[v._v("首先，什么是MVVM？Model-View-ViewModel、ViewModel可以理解为在presenter基础上的进阶版")]),v._v(" "),a("p",[v._v("VIew => ViewModel => Model")]),v._v(" "),a("p",[v._v("ViewModel通过实现一套数据响应式机制自动响应Model中数据变化，")]),v._v(" "),a("p",[v._v("同时ViewModel实现一套更新策略自动将数据变化转换为视图更新。")]),v._v(" "),a("p",[v._v("通过事件监听响应view中用户交互修改Model中数据。")]),v._v(" "),a("p",[v._v("这样ViewModel中就减少了大量Dom操作的代码")]),v._v(" "),a("p",[v._v("MVVM在保持着VIew和Model松耦合的同时，还减少了维护他们的关系的代码，使用户专注于业务逻辑，兼顾开发效率和可维护性.")])])}),[],!1,null,null,null);e.default=_.exports}}]);